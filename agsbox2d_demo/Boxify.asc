// new module script
enum FixtureElementMatch {
  eFixtureMatchesNone = 0,   
  eFixtureMatchesObject = 1, 
  eFixtureMatchesCharacter = 2,
};

struct Element {
  Fixture* fixture;
  Body* body;
  FixtureElementMatch fixtureMatchType;
  int fixtureMatchToID;
  Point* pivotPoint;
};

Element element[10000];

struct RoomWorld {
  World* world;
  int element_count;
};

RoomWorld room_world[400];

void game_start() {
  
}

function on_event(EventType event, int data) {
  if (event == eEventEnterRoomBeforeFadein) {
    int room_id = data;
  }
}

function initializeRoomIfNeeded() {
  int room_id = player.Room;
  if( room_world[room_id].world == null){
    AgsBox2D.SetMeter(32.0);
    room_world[room_id].world = AgsBox2D.CreateWorld(0.0, 9.8*AgsBox2D.GetMeter());
  }
}

function repeatedly_execute() {
  int room_id = player.Room;
  if( room_world[room_id].world != null){
    room_world[room_id].world.Step(1.0/IntToFloat(GetGameSpeed()), 8, 3);
    
    for(int i=0; i<room_world[room_id].element_count; i++){
      int id = i + room_id*100;
      
      if(element[id].fixtureMatchType == eFixtureMatchesObject){
        Object* obj = object[element[id].fixtureMatchToID];
        obj.X = element[id].body.X-element[id].pivotPoint.x;
        obj.Y = element[id].body.Y+element[id].pivotPoint.y;
      } else 
      if(element[id].fixtureMatchType == eFixtureMatchesCharacter){
        Character* cha = character[element[id].fixtureMatchToID];
        cha.x = element[id].body.X-element[id].pivotPoint.x;
        cha.y = element[id].body.Y+element[id].pivotPoint.y;
      }
    }
  }
}

static Fixture* Boxify::Object(Object* obj, Shape* shape, BodyType body_type, int pivot_x, int pivot_y) {
  initializeRoomIfNeeded();
  int room_id = player.Room;
  int obj_width = Game.SpriteWidth[obj.Graphic];
  int obj_height = Game.SpriteHeight[obj.Graphic];
  int id = room_world[room_id].element_count + room_id*100;
  
  for(int i=0; i<100; i++){
    int id_test = i + room_id*100;
    if(element[id_test].fixtureMatchToID == obj.ID && 
       element[id_test].fixtureMatchType == eFixtureMatchesObject && 
       element[id_test].fixture != null) return element[id_test].fixture;
  }
  
  Shape* shap = shape;
  
  element[id].pivotPoint = new Point;
  if(pivot_x == INVALID_COORD) element[id].pivotPoint.x = obj_width/2;
  else element[id].pivotPoint.x = pivot_x;
  if(pivot_y == INVALID_COORD) element[id].pivotPoint.y = obj_height/2;
  else element[id].pivotPoint.y = pivot_y;
  
  if(shap == null){
    shap = AgsBox2D.CreateRectangleShape(IntToFloat(obj_width), IntToFloat(obj_height));
  }
  
  element[id].body = AgsBox2D.CreateBody(room_world[room_id].world, 
                     IntToFloat(obj.X+obj_width/2),  IntToFloat(obj.Y-obj_height/2), eBodyDynamic);
                     
  element[id].fixture = AgsBox2D.CreateFixture(element[id].body, shap, 1.0);
    
  element[id].fixtureMatchType = eFixtureMatchesObject;
  element[id].fixtureMatchToID = obj.ID;
    
  room_world[room_id].element_count += 1;
  return element[id].fixture;
}

static Fixture* Boxify::Character(Character* chara, Shape* shape, int pivot_x,  int pivot_y) {
  initializeRoomIfNeeded();
  int room_id = player.Room;
  ViewFrame* vf = Game.GetViewFrame(chara.View, chara.Loop, chara.Frame);
  int cha_width = Game.SpriteWidth[vf.Graphic];
  int cha_height = Game.SpriteHeight[vf.Graphic];
  int id = room_world[room_id].element_count + room_id*100;
  
  for(int i=0; i<100; i++){
    int id_test = i + room_id*100;
    if(element[id_test].fixtureMatchToID == chara.ID && 
       element[id_test].fixtureMatchType == eFixtureMatchesCharacter && 
       element[id_test].fixture != null) return element[id_test].fixture;
  }
  
  Shape* shap = shape;
  
  element[id].pivotPoint = new Point;
  if(pivot_x == INVALID_COORD) element[id].pivotPoint.x = 0;
  else element[id].pivotPoint.x = pivot_x;
  if(pivot_y == INVALID_COORD) element[id].pivotPoint.y = cha_height/2;
  else element[id].pivotPoint.y = pivot_y;
  
  if(shap == null){
    shap = AgsBox2D.CreateRectangleShape(IntToFloat(cha_width), IntToFloat(cha_height)); 
  }
  
  element[id].body = AgsBox2D.CreateBody(room_world[room_id].world, 
                     IntToFloat(chara.x),  IntToFloat(chara.y-cha_height/2), eBodyDynamic);
                     
  element[id].fixture = AgsBox2D.CreateFixture(element[id].body, shap, 1.0);
  
  element[id].fixtureMatchType = eFixtureMatchesCharacter;
  element[id].fixtureMatchToID = chara.ID;
  
  room_world[room_id].element_count += 1;
  return element[id].fixture;
}

static World* Boxify::GetRoomWorld(){
  initializeRoomIfNeeded();
  int room_id = player.Room;
  return room_world[room_id].world;
}