// room script file
#define MAX_PLATFORMS 26

World* world;

Body* outscreen_ground;
Body* platform[MAX_PLATFORMS];

struct Physical {
  Body* body;
  Shape* shape;
  Fixture* fixture;
};

bool won;
Physical ego_physics;

bool isTouchingAGround(Body* b){
  for(int i=0; i<MAX_PLATFORMS; i++){
    if(b.IsTouching(platform[i])){
      return true;  
    }    
  }
  return false;
}



void CreateGrounds(World* wrld)
{
  outscreen_ground = AgsBox2D.CreateBody(wrld, 1256.0, 322.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    outscreen_ground, 
    AgsBox2D.CreateRectangleShape(2800.0, 24.0));
  
  platform[0] = AgsBox2D.CreateBody(wrld, 106.0, 126.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[0], AgsBox2D.CreateRectangleShape(80.0, 20.0));
    
  platform[1] = AgsBox2D.CreateBody(wrld, 167.0, 220.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[1], AgsBox2D.CreateRectangleShape(40.0, 20.0));
    
  platform[2] = AgsBox2D.CreateBody(wrld, 234.0, 196.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[2], AgsBox2D.CreateRectangleShape(20.0, 40.0));
    
  platform[3] = AgsBox2D.CreateBody(wrld, 580.0, 175.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[3], AgsBox2D.CreateRectangleShape(716.0, 28.0));
    
  platform[4] = AgsBox2D.CreateBody(wrld, 1033.0, 173.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[4], AgsBox2D.CreateRectangleShape(192.0, 24.0));
    
  platform[5] = AgsBox2D.CreateBody(wrld, 1260.0, 173.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[5], AgsBox2D.CreateRectangleShape(282.0, 24.0));
    
  platform[6] = AgsBox2D.CreateBody(wrld, 1578.0, 280.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[6], AgsBox2D.CreateRectangleShape(72.0, 47.0));
    
  platform[7] = AgsBox2D.CreateBody(wrld, 1617.0, 269.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[7], AgsBox2D.CreateRectangleShape(25.0, 32.0));
  platform[7].Angle = -0.174533;
  
  
  platform[8] = AgsBox2D.CreateBody(wrld, 1627.0, 264.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[8], AgsBox2D.CreateRectangleShape(27.0, 32.0));
  platform[8].Angle = -0.523599;
    
  platform[9] = AgsBox2D.CreateBody(wrld, 1665.0, 265.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[9], AgsBox2D.CreateRectangleShape(70.0, 42.0));
    
  platform[10] = AgsBox2D.CreateBody(wrld, 1703.0, 265.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[10], AgsBox2D.CreateRectangleShape(27.0, 32.0));
  platform[10].Angle = 0.523599;
    
  platform[11] = AgsBox2D.CreateBody(wrld, 1746.0, 278.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[11], AgsBox2D.CreateRectangleShape(100.0, 42.0));
    
  platform[12] = AgsBox2D.CreateBody(wrld, 1806.0, 277.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[12], AgsBox2D.CreateRectangleShape(72.0, 42.0));
  platform[12].Angle = -0.36;
  
  platform[13] = AgsBox2D.CreateBody(wrld, 1870.0, 265.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[13], AgsBox2D.CreateRectangleShape(78.0, 42.0));
    
  platform[14] = AgsBox2D.CreateBody(wrld, 1936.0, 277.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[14], AgsBox2D.CreateRectangleShape(72.0, 42.0));
  platform[14].Angle = 0.36;
  
  platform[15] = AgsBox2D.CreateBody(wrld, 1978.0, 279.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[15], AgsBox2D.CreateRectangleShape(78.0, 42.0));
        
  platform[16] = AgsBox2D.CreateBody(wrld, 2024.0, 282.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[16], AgsBox2D.CreateRectangleShape(30.0, 42.0));
  platform[16].Angle = 0.24;
  
  platform[17] = AgsBox2D.CreateBody(wrld, 1810.0, 166.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[17], AgsBox2D.CreateRectangleShape(36.0, 10.0));
    
  platform[18] = AgsBox2D.CreateBody(wrld, 1841.0, 197.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[18], AgsBox2D.CreateRectangleShape(24.0, 6.0));
    
  platform[19] = AgsBox2D.CreateBody(wrld, 1865.0, 128.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[19], AgsBox2D.CreateRectangleShape(24.0, 6.0));
    
  platform[20] = AgsBox2D.CreateBody(wrld, 1912.0, 104.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[20], AgsBox2D.CreateRectangleShape(36.0, 10.0));
    
  platform[21] = AgsBox2D.CreateBody(wrld, 2026.0, 100.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[21], AgsBox2D.CreateRectangleShape(120.0, 36.0));
    
  platform[22] = AgsBox2D.CreateBody(wrld, 2026.0, 88.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[22], AgsBox2D.CreateRectangleShape(126.0, 6.0));
    
  platform[23] = AgsBox2D.CreateBody(wrld, 1540.0, 267.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[23], AgsBox2D.CreateRectangleShape(24.0, 16.0));
  platform[23].Angle = -0.20;
  
  platform[24] = AgsBox2D.CreateBody(wrld, 2168.0, 150.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[24], AgsBox2D.CreateRectangleShape(29.0, 16.0));
    
  platform[25] = AgsBox2D.CreateBody(wrld, 2272.0, 150.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[25], AgsBox2D.CreateRectangleShape(42.0, 16.0));
    
  platform[25] = AgsBox2D.CreateBody(wrld, 2384.0, 230.0, eBodyStatic);
  AgsBox2D.CreateFixture(
    platform[25], AgsBox2D.CreateRectangleShape(84.0, 16.0));
}

int Abs(int v){
  if(v<0){
    return -v;  
  }  
  return v;
}

int prev_x;
int tmp_ego_frame;
int gameframecount;
int stopped_count;
void UpdatePlayerPosition(){
  gameframecount++;
  cEgo.x = ego_physics.body.X;
  cEgo.y = ego_physics.body.Y+5;
  
  if(cEgo.x > prev_x){
    cEgo.Loop = 2;
  } else if(cEgo.x < prev_x){
    cEgo.Loop = 1;
  }
  
  int dist = Abs(cEgo.x - prev_x);
  
  if(dist == 0){
    stopped_count++; 
  } else {
    stopped_count=0;  
  }
  
  if(dist>32) dist = 32;
   
  int lim_idist = 8/(dist+1);
  
  if(lim_idist>4) lim_idist = 4;
  if(lim_idist<1) lim_idist = 1;
    
  if( dist > 0){ 
    if(ego_physics.body.LinearVelocityX > 0.01 || ego_physics.body.LinearVelocityX < -0.01){
      if(gameframecount%lim_idist==0){      
        tmp_ego_frame++;
      }
    }
  }
  
  if(tmp_ego_frame>=Game.GetFrameCountForLoop(cEgo.NormalView, cEgo.Loop)){
    tmp_ego_frame = 1;  
  }
  
  if(stopped_count>2){
    cEgo.LockViewFrame(cEgo.NormalView, cEgo.Loop, 0);     
  } else {
    cEgo.LockViewFrame(cEgo.NormalView, cEgo.Loop, tmp_ego_frame); 
  }
  
  prev_x = cEgo.x;
}

function room_Load()
{
  won = false;
  gDebugGUI.Y = 0;
  gDebugGUI.Transparency = 50;
  gDebugGUI.Visible = false;
  
  if(world == null){
    AgsBox2D.SetMeter(32.0);
    world = AgsBox2D.CreateWorld(0.0, 9.8*AgsBox2D.GetMeter());
    
    ego_physics.body = AgsBox2D.CreateBody(world, 104.0, 109.0, eBodyDynamic);
    ego_physics.shape = AgsBox2D.CreateCircleShape(6.0);
    ego_physics.fixture = AgsBox2D.CreateFixture(ego_physics.body, ego_physics.shape, 5.0); 
    ego_physics.fixture.Friction = 0.2;
    ego_physics.body.LinearDamping = 0.2;
    
    CreateGrounds(world);
  }
}

function room_RepExec()
{
  if(IsKeyPressed(eKeyLeftArrow)){
    ego_physics.body.ApplyForce(-100.0, 0.0);
    
  }
  if(IsKeyPressed(eKeyRightArrow)){
    ego_physics.body.ApplyForce(100.0, 0.0);
  }
  if(outscreen_ground.IsTouching(ego_physics.body)){
    //you died
    ego_physics.body.X = 104;  
    ego_physics.body.Y = 109;
    won = false;
  }
  
  UpdatePlayerPosition();
  
  if(gDebugGUI.Visible){
    gDebugGUI.Transparency = 50;
    gDebugGUI.BackgroundGraphic = world.GetDebugSprite(Game.Camera.X, Game.Camera.Y);
  }
  
  world.Step(1.0/IntToFloat(GetGameSpeed()), 8, 3);
}

function on_key_press(eKeyCode keycode) 
{
  if(keycode == eKeyUpArrow || keycode == eKeySpace){
    if(isTouchingAGround(ego_physics.body)){
      ego_physics.body.ApplyForce(0.0, -4000.0);
      ego_physics.body.SetLinearVelocity(0.0, 0.0);
    }
  }
  if(keycode == eKeyB || keycode == eKeyTab){
    gDebugGUI.Visible = !gDebugGUI.Visible;  
  }
}
function room_Leave()
{
  gDebugGUI.BackgroundGraphic = 0;
  gDebugGUI.Visible = false;
}

function region1_Standing()
{
  if(ego_physics.body.LinearVelocityX <= 0.01 && 
     ego_physics.body.LinearVelocityY <= 0.01 &&
     won == false){
    
    won = true;
    Display("You   are   great!!!");
    Display("[Thanks   for   testing   AGS   Box   2D   Demo![ ");
    
    Display("[Read   more   on   how   to   use   on   the   README : [[github.com/ericoporto/agsbox2d[ ");
  }
}
