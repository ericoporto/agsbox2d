// room script file
// Room 6 - Usage with graphics
// This is the same as Room 5, but without Boxify. 
// This will give us a little bit more control over the link between objects and bodies.

Body*[] setWalls(World* wrld) { 
  Body* _w[]; 
  _w = new Body[18]; 
  _w[0] = AgsBox2D.CreateBody(wrld, 541.3, 107.8, eBodyStatic); 
  AgsBox2D.CreateFixture(_w[0], AgsBox2D.CreateRectangleShape(64.5, 17.5)); 
  _w[0].Angle =0.0000 ; 
  _w[1] = AgsBox2D.CreateBody(wrld, 535.5, 100.8, eBodyStatic); 
  AgsBox2D.CreateFixture(_w[1], AgsBox2D.CreateRectangleShape(14.0, 11.5)); 
  _w[1].Angle =0.7888 ; 
  _w[2] = AgsBox2D.CreateBody(wrld, 529.0, 100.8, eBodyStatic); 
  AgsBox2D.CreateFixture(_w[2], AgsBox2D.CreateRectangleShape(11.0, 19.5)); 
  _w[2].Angle =0.0000 ; 
  _w[3] = AgsBox2D.CreateBody(wrld, 516.0, 101.8, eBodyStatic); 
  AgsBox2D.CreateFixture(_w[3], AgsBox2D.CreateRectangleShape(23.0, 12.5)); 
  _w[3].Angle =-0.4900 ; 
  _w[4] = AgsBox2D.CreateBody(wrld, 497.8, 118.0, eBodyStatic); 
  AgsBox2D.CreateFixture(_w[4], AgsBox2D.CreateRectangleShape(28.5, 40.0)); 
  _w[4].Angle =0.0000 ; 
  _w[5] = AgsBox2D.CreateBody(wrld, 628.5, 218.5, eBodyStatic); 
  AgsBox2D.CreateFixture(_w[5], AgsBox2D.CreateRectangleShape(100.0, 50.0)); 
  _w[5].Angle =0.0000 ; 
  _w[6] = AgsBox2D.CreateBody(wrld, 596.5, 251.5, eBodyStatic); 
  AgsBox2D.CreateFixture(_w[6], AgsBox2D.CreateRectangleShape(100.0, 50.0)); 
  _w[6].Angle =0.0000 ; 
  _w[7] = AgsBox2D.CreateBody(wrld, 533.0, 284.5, eBodyStatic); 
  AgsBox2D.CreateFixture(_w[7], AgsBox2D.CreateRectangleShape(100.0, 50.0)); 
  _w[7].Angle =0.0000 ; 
  _w[8] = AgsBox2D.CreateBody(wrld, 455.3, 257.8, eBodyStatic); 
  AgsBox2D.CreateFixture(_w[8], AgsBox2D.CreateRectangleShape(195.5, 73.5)); 
  _w[8].Angle =0.7801 ; 
  _w[9] = AgsBox2D.CreateBody(wrld, 272.8, 192.8, eBodyStatic); 
  AgsBox2D.CreateFixture(_w[9], AgsBox2D.CreateRectangleShape(278.5, 59.5)); 
  _w[9].Angle =0.0000 ; 
  _w[10] = AgsBox2D.CreateBody(wrld, 110.5, 214.0, eBodyStatic); 
  AgsBox2D.CreateFixture(_w[10], AgsBox2D.CreateRectangleShape(100.0, 50.0)); 
  _w[10].Angle =-0.6928 ; 
  _w[11] = AgsBox2D.CreateBody(wrld, 110.5, 219.5, eBodyStatic); 
  AgsBox2D.CreateFixture(_w[11], AgsBox2D.CreateRectangleShape(100.0, 50.0)); 
  _w[11].Angle =0.0000 ; 
  _w[12] = AgsBox2D.CreateBody(wrld, 46.0, 190.0, eBodyStatic); 
  AgsBox2D.CreateFixture(_w[12], AgsBox2D.CreateRectangleShape(32.0, 56.0)); 
  _w[12].Angle =0.0000 ; 
  _w[13] = AgsBox2D.CreateBody(wrld, 323.3, 327.0, eBodyStatic); 
  AgsBox2D.CreateFixture(_w[13], AgsBox2D.CreateRectangleShape(618.5, 24.0)); 
  _w[13].Angle =0.0000 ; 
  _w[14] = AgsBox2D.CreateBody(wrld, 641.8, 151.0, eBodyStatic); 
  AgsBox2D.CreateFixture(_w[14], AgsBox2D.CreateRectangleShape(63.5, 340.0)); 
  _w[14].Angle =0.0000 ; 
  _w[15] = AgsBox2D.CreateBody(wrld, 329.5, -4.8, eBodyStatic); 
  AgsBox2D.CreateFixture(_w[15], AgsBox2D.CreateRectangleShape(613.0, 12.5)); 
  _w[15].Angle =0.0000 ; 
  _w[16] = AgsBox2D.CreateBody(wrld, 7.5, 153.3, eBodyStatic); 
  AgsBox2D.CreateFixture(_w[16], AgsBox2D.CreateRectangleShape(44.0, 333.5)); 
  _w[16].Angle =0.0000 ; 
  _w[17] = null; 
  return _w; 
} 

World* world;

struct PhysicalObject {
  Body* body;
  Fixture* fixture;
  Object* obj;
};

struct PhysicalCharacter {
  Body* body;
  Fixture* fixture;
  Character* character;  
};

PhysicalCharacter roger;
PhysicalObject box1;
PhysicalObject box2;
PhysicalObject box3;
PhysicalObject box4;
PhysicalObject box5;
PhysicalObject box6;
PhysicalObject barrel1;

float dt; // we will use this to hold the time each frame of the world simulation takes in seconds (0.016 for 60fps).

// Let's make some helpful functions
float GetObjectCenterX(Object* obj){
  return IntToFloat(obj.X + Game.SpriteWidth[obj.Graphic]/2);
}

// I am adding an offset here because the graphics used for the box top has an area that things should rest on top.
float GetObjectCenterY(Object* obj, int offsety){
  return IntToFloat(obj.Y + offsety - Game.SpriteHeight[obj.Graphic]/2);  
}

// This will position the objects and roger on the screen, we will call this every frame
// We could improve this, we could update the position only if a body is awake, we won't do this for simplicity.
void update_positions() {
  roger.character.x = roger.body.X;
  roger.character.y = roger.body.Y+20;
  
  box1.obj.X = box1.body.X-11;
  box1.obj.Y = box1.body.Y+11;
  box1.obj.Baseline = 256-box1.obj.Y; //I am doing this change on baseline so the objects look good when piled on top of each other.
    
  box2.obj.X = box2.body.X-11;
  box2.obj.Y = box2.body.Y+11;
  box2.obj.Baseline = 256-box2.obj.Y;
  
  box3.obj.X = box3.body.X-11;
  box3.obj.Y = box3.body.Y+11;
  box3.obj.Baseline = 256-box3.obj.Y;
  
  box4.obj.X = box4.body.X-11;
  box4.obj.Y = box4.body.Y+11;
  box4.obj.Baseline = 256-box4.obj.Y;
  
  box5.obj.X = box5.body.X-11;
  box5.obj.Y = box5.body.Y+11;
  box5.obj.Baseline = 256-box5.obj.Y;
  
  box6.obj.X = box6.body.X-11;
  box6.obj.Y = box6.body.Y+11;
  box6.obj.Baseline = 256-box6.obj.Y;
    
  barrel1.obj.X = barrel1.body.X-7;
  barrel1.obj.Y = barrel1.body.Y+7;
  barrel1.obj.Baseline = 256-barrel1.obj.Y;

}

function room_Load()
{
  if(world == null){
    dt = 1.0/IntToFloat(GetGameSpeed());
    AgsBox2D.SetMeter(32.0);
    world = AgsBox2D.CreateWorld(0.0, 9.8*AgsBox2D.GetMeter());
    setWalls(world); // we will create the walls here
    
    roger.body = AgsBox2D.CreateBody(world, 196.0, 93.0, eBodyDynamic);
    roger.character = cEgo;
    roger.fixture = AgsBox2D.CreateFixture(roger.body, AgsBox2D.CreateRectangleShape(12.0, 35.0), 1.0);
    
    int offy = -6;
    Shape* box_shape = AgsBox2D.CreateRectangleShape(22.0, 22.0);
    box1.body = AgsBox2D.CreateBody(world, GetObjectCenterX(obj_box1), GetObjectCenterY(obj_box1, offy), eBodyDynamic);
    box1.fixture = AgsBox2D.CreateFixture(box1.body, box_shape, 1.0);
    box1.obj = obj_box1;
    
    box2.body = AgsBox2D.CreateBody(world, GetObjectCenterX(obj_box2), GetObjectCenterY(obj_box2, offy), eBodyDynamic);
    box2.fixture = AgsBox2D.CreateFixture(box2.body, box_shape, 1.0);
    box2.obj = obj_box2;
    
    box3.body = AgsBox2D.CreateBody(world, GetObjectCenterX(obj_box3), GetObjectCenterY(obj_box3, offy), eBodyDynamic);
    box3.fixture = AgsBox2D.CreateFixture(box3.body, box_shape, 1.0);
    box3.obj = obj_box3;
    
    box4.body = AgsBox2D.CreateBody(world, GetObjectCenterX(obj_box4), GetObjectCenterY(obj_box4, offy), eBodyDynamic);
    box4.fixture = AgsBox2D.CreateFixture(box4.body, box_shape, 1.0);
    box4.obj = obj_box4;
    
    box5.body = AgsBox2D.CreateBody(world, GetObjectCenterX(obj_box5), GetObjectCenterY(obj_box5, offy), eBodyDynamic);
    box5.fixture = AgsBox2D.CreateFixture(box5.body, box_shape, 1.0);
    box5.obj = obj_box5;
    
    box6.body = AgsBox2D.CreateBody(world, GetObjectCenterX(obj_box6), GetObjectCenterY(obj_box6, offy), eBodyDynamic);
    box6.fixture = AgsBox2D.CreateFixture(box6.body, box_shape, 1.0);
    box6.obj = obj_box6;
    
    Shape* barrel_shape = AgsBox2D.CreateRectangleShape(14.0, 14.0);
    barrel1.body = AgsBox2D.CreateBody(world, GetObjectCenterX(obj_barrel1), GetObjectCenterY(obj_barrel1, -4), eBodyDynamic);
    barrel1.fixture = AgsBox2D.CreateFixture(barrel1.body, barrel_shape, 2.0);
    barrel1.obj = obj_barrel1;
  }
}

bool was_mouse_pressed;
Joint* myMouseJoint;
function room_RepExec()
{
  float m_x = IntToFloat(mouse.x+Game.Camera.X);
  float m_y = IntToFloat(mouse.y+Game.Camera.Y);
  if(!was_mouse_pressed && mouse.IsButtonDown(eMouseLeft)){
    
    FixtureArray* farr = world.BoundingBoxQuery(m_x-0.5, m_y-0.5, m_x+0.5, m_y+0.5);
    
    if(farr!=null && farr.Size >= 1 && farr.Items[0].TestPoint(m_x, m_y)){
      myMouseJoint = AgsBox2D.CreateMouseJoint(farr.Items[0].Body, m_x,  m_y);
    } 
    
  } else if(was_mouse_pressed && !mouse.IsButtonDown(eMouseLeft)){
    AgsBox2D.DestroyJoint(world, myMouseJoint);
  } else if (mouse.IsButtonDown(eMouseLeft) && myMouseJoint != null && myMouseJoint.IsValid ) {
    myMouseJoint.AsMouse.SetTarget(m_x,  m_y);
  }
  
  was_mouse_pressed = mouse.IsButtonDown(eMouseLeft);
  if(gDebugGUI.Visible){
    gDebugGUI.Transparency = 50;
    gDebugGUI.BackgroundGraphic = world.GetDebugSprite(Game.Camera.X, Game.Camera.Y);
  }
  
  world.Step(dt);
  update_positions();
}

function on_key_press(eKeyCode keycode) 
{
  if(keycode == eKeyB || keycode == eKeyTab){
    gDebugGUI.Visible = !gDebugGUI.Visible;  
  }

}

function room_Leave()
{
  gDebugGUI.BackgroundGraphic = 0;
  gDebugGUI.Visible = false;
}