// room script file
// Room 1 - the basics

// In this room we will do the basics of box2d
// We will create a world, the world is where all the physics simulation happens.
// Nothing in Box2D "exists", it just calculates a bunch of numbers that we can use.
// To help visualize these numbers, it also offers a debug image, where the shapes and their movements are drawn,
// As if these numbers had a meaning. We are going to use this debug image to show these shapes moving on the screen.

//we need a way to store the world.
World* world; // If the world doesn't exist, everything in it is gone as well, se we make this "global" to our room.
Overlay* ov; // The overlay is merely for showing the debug sprite on screen.

struct Physical {  // This struct will help hold important pointers for us.
  Body* body;      // The body is a point in the simulation world
  Shape* shape;    // A shape can have many forms, for now we will use only Rectangles and Circles.
  Fixture* fixture; // A fixtures attaches a shape to a body, enabling the body the ability to collide with other bodies that have shapes attached to them.
};

Physical ground; // We are going to create just a single platform as ground
Physical ball; // And a ball is going to be our "player" here
// Note: Avoid this in a game, usually you want at least for walls outside of the screen enclosing your bodies,
// Otherwise once they fall the platform, the simulation will need to calculate the body falling through eternity,
// which is an extra effort to the simulation for no reason. If it falls in a bigger cage outside the screen limit
// the body will reach rest state eventually, or you can even detect it so you can eliminate it.

function room_Load()
{
  if(world == null){
    // The line below says in our world, 32 pixels means 1 meter. So, a 1.8 meter character would have 58 pixels in height.
    AgsBox2D.SetMeter(32.0); // The physics simulation is tuned to work best from 0.1 to 10 meters, so in this world, 3 px to 320 px in size are good.
    // NOTE: 32.0 is the default, so if you don't set any value, 32 pixels will be equal to 1 meter.
    
    world = AgsBox2D.CreateWorld(0.0, 9.8*AgsBox2D.GetMeter()); //We create the world, and set the gravitational acceleration as we wish. 
    // Positive y is down in AGS. Also, since we are talking in pixels, acceleration has to be set in pixels per squared seconds.
    
    ground.body = AgsBox2D.CreateBody(world, 160.0, 160.0, eBodyStatic); // This creates a static body, at the 160 pixels x and 160 pixels y in the world. It's just a point.
    ground.shape = AgsBox2D.CreateRectangleShape(320.0, 40.0); // This creates a rectangle of 320 pixel width and 40 pixels height, but this rectangle doesn't exist anywhere.
    ground.fixture = AgsBox2D.CreateFixture(ground.body, ground.shape); // This copies the rectangle we created, and attaches this copy center point on to the body. Because the body is static, it's mass is infinite.

    ball.body = AgsBox2D.CreateBody(world, 160.0, 40.0, eBodyDynamic); // This creates a dynamic body at the position 160, 40 in the world. It's a point.
    ball.shape = AgsBox2D.CreateCircleShape(20.0); // This creates a circle of 20 pixels radius, but this circle doesn't exist anywhere.
    ball.fixture = AgsBox2D.CreateFixture(ball.body, ball.shape, 1.0); // This copies the circle we created, and attaches this copy center point on to the body, it's density is 1/(32*32) kg per squared pixels.
    ball.fixture.Restitution = 0.5; // This makes the ball receive half of the force it impacted another body, in the oposing direction. This will make the ball bounce.
    
    // The below will create a box 30 width and 20 height, that is dynamic, with center at 80, 60 position, with a density of 5/(32*32) kg/sq px. 
    // We won't do anything with it outside of the physics, so we don't store pointers to it.
    AgsBox2D.CreateFixture(AgsBox2D.CreateBody(world, 80.0, 60.0, eBodyDynamic), 
                           AgsBox2D.CreateRectangleShape(30.0, 20.0), 5.0);
  }
}

// Remember, for this function to execute you need to link it in the room repeatedly execute event in the Editor
function room_RepExec()
{
  // In AGS coordinates, position increases as we go to the right, so positive values in the x coordinate pushes to the right.
  if(IsKeyPressed(eKeyLeftArrow)) ball.body.ApplyForce(-500.0, 0.0); // We are going to check if left key is pressed, and if it's, apply a force pushing the ball left.
  if(IsKeyPressed(eKeyRightArrow)) ball.body.ApplyForce(500.0, 0.0); // This does the same, but to the right direction. 
  if(IsKeyPressed(eKeyUpArrow) && ball.body.IsTouching(ground.body)){ // We want the ball to jump if we press up, but only if it's touching the ground.
    ball.body.ApplyForce(0.0, -6000.0); // A negative vector in y points upwards, remember the positive gravity points downwards?
    ball.body.SetLinearVelocity(0.0, 0.0); // This resets the linear velocity, so that when you press up, the ball initially moves upwards and dismiss previous side momentum it had.
  }
  
  if(ov!=null && ov.Valid) ov.Remove();  // This is just to reset the overlay at every frame, so we are erasing it.
  ov = Overlay.CreateGraphical(0, 0, world.GetDebugSprite(), true); // The overlay here is used to show the debug sprite, to help us visualize what's happening.
  
  world.Step(1.0/IntToFloat(GetGameSpeed()), 8, 3); //This advances a time instant in the simulation. Nothing will happen unless the world advances a step. The calculation here yields 16 ms.
  // The value 8 and 3 passed along are used for simulation convergence, if you omit then, they are the default values. You should not change them unless you know what you are doing.
}
